{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from 'react';\nimport ClickOutside from './ClickOutside';\nimport DevicesIcon from './icons/Devices';\nimport { px, styled } from '../styles';\nvar Wrapper = styled('div')({\n  'pointer-events': 'all',\n  position: 'relative',\n  zIndex: 20,\n  '> div': {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: px(8),\n    position: 'absolute',\n    right: \"-\".concat(px(3)),\n    button: {\n      display: 'block',\n      padding: px(8),\n      whiteSpace: 'nowrap',\n      '&.rswp__devices__active': {\n        fontWeight: 'bold'\n      }\n    }\n  },\n  '> button': {\n    fontSize: px(26)\n  }\n}, function (_a) {\n  var _b;\n\n  var style = _a.style;\n  return {\n    '> button': {\n      color: style.c\n    },\n    '> div': (_b = {\n      backgroundColor: style.bgColor,\n      boxShadow: style.altColor ? \"1px 1px 10px \".concat(style.altColor) : 'none'\n    }, _b[style.p] = '120%', _b.button = {\n      color: style.c\n    }, _b)\n  };\n}, 'DevicesRSWP');\n\nvar Devices =\n/** @class */\nfunction (_super) {\n  __extends(Devices, _super);\n\n  function Devices(props) {\n    var _this = _super.call(this, props) || this;\n\n    Object.defineProperty(_this, \"handleClickSetDevice\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function (event) {\n        var onClickDevice = _this.props.onClickDevice;\n        var dataset = event.currentTarget.dataset;\n        /* istanbul ignore else */\n\n        if (dataset.id) {\n          onClickDevice(dataset.id);\n\n          _this.setState({\n            isOpen: false\n          });\n        }\n      }\n    });\n    Object.defineProperty(_this, \"handleClickToggleDevices\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function () {\n        _this.setState(function (state) {\n          return {\n            isOpen: !state.isOpen\n          };\n        });\n      }\n    });\n    _this.state = {\n      isOpen: props.open\n    };\n    return _this;\n  }\n\n  Object.defineProperty(Devices.prototype, \"render\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var isOpen = this.state.isOpen;\n      var _a = this.props,\n          currentDeviceId = _a.currentDeviceId,\n          deviceId = _a.deviceId,\n          devices = _a.devices,\n          playerPosition = _a.playerPosition,\n          _b = _a.styles,\n          activeColor = _b.activeColor,\n          altColor = _b.altColor,\n          bgColor = _b.bgColor,\n          color = _b.color,\n          title = _a.title;\n      return _jsx(Wrapper, __assign({\n        style: {\n          altColor: altColor,\n          bgColor: bgColor,\n          c: currentDeviceId && deviceId && currentDeviceId !== deviceId ? activeColor : color,\n          p: playerPosition\n        }\n      }, {\n        children: !!devices.length && _jsxs(_Fragment, {\n          children: [isOpen && _jsx(ClickOutside, __assign({\n            onClick: this.handleClickToggleDevices\n          }, {\n            children: devices.map(function (d) {\n              return _jsx(\"button\", __assign({\n                className: d.id === currentDeviceId ? 'rswp__devices__active' : undefined,\n                \"data-id\": d.id,\n                onClick: _this.handleClickSetDevice,\n                type: \"button\"\n              }, {\n                children: d.name\n              }), d.id);\n            })\n          })), _jsx(\"button\", __assign({\n            \"aria-label\": title,\n            onClick: this.handleClickToggleDevices,\n            title: title,\n            type: \"button\"\n          }, {\n            children: _jsx(DevicesIcon, {})\n          }))]\n        })\n      }));\n    }\n  });\n  return Devices;\n}(React.PureComponent);\n\nexport default Devices;","map":{"version":3,"mappings":"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","names":["React","ClickOutside","DevicesIcon","px","styled","Wrapper","position","zIndex","display","flexDirection","padding","right","button","whiteSpace","fontWeight","fontSize","_a","style","color","c","_b","backgroundColor","bgColor","boxShadow","altColor","p","__extends","props","_super","Object","event","_this","onClickDevice","currentTarget","dataset","id","setState","isOpen","state","open","currentDeviceId","deviceId","devices","playerPosition","activeColor","title","_jsx","__assign","children","length","_jsxs","onClick","handleClickToggleDevices","map","d","className","undefined","handleClickSetDevice","type","name","PureComponent"],"sources":["/Users/cedmarth/StudentWork/JS/apps/music-app/frontend/src/node_modules/react-spotify-web-playback/src/components/Devices.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport ClickOutside from './ClickOutside';\nimport DevicesIcon from './icons/Devices';\n\nimport { px, styled } from '../styles';\nimport { StyledProps, StylesOptions } from '../types/common';\nimport { SpotifyDevice } from '../types/spotify';\n\ninterface Props {\n  currentDeviceId?: string;\n  deviceId?: string;\n  devices: SpotifyDevice[];\n  onClickDevice: (deviceId: string) => any;\n  open: boolean;\n  playerPosition: string;\n  styles: StylesOptions;\n  title: string;\n}\n\nexport interface State {\n  isOpen: boolean;\n}\n\nconst Wrapper = styled('div')(\n  {\n    'pointer-events': 'all',\n    position: 'relative',\n    zIndex: 20,\n\n    '> div': {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: px(8),\n      position: 'absolute',\n      right: `-${px(3)}`,\n\n      button: {\n        display: 'block',\n        padding: px(8),\n        whiteSpace: 'nowrap',\n\n        '&.rswp__devices__active': {\n          fontWeight: 'bold',\n        },\n      },\n    },\n\n    '> button': {\n      fontSize: px(26),\n    },\n  },\n  ({ style }: StyledProps) => ({\n    '> button': {\n      color: style.c,\n    },\n    '> div': {\n      backgroundColor: style.bgColor,\n      boxShadow: style.altColor ? `1px 1px 10px ${style.altColor}` : 'none',\n      [style.p]: '120%',\n      button: {\n        color: style.c,\n      },\n    },\n  }),\n  'DevicesRSWP',\n);\n\nexport default class Devices extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isOpen: props.open,\n    };\n  }\n\n  private handleClickSetDevice = (event: React.MouseEvent<HTMLElement>) => {\n    const { onClickDevice } = this.props;\n    const { dataset } = event.currentTarget;\n\n    /* istanbul ignore else */\n    if (dataset.id) {\n      onClickDevice(dataset.id);\n\n      this.setState({ isOpen: false });\n    }\n  };\n\n  private handleClickToggleDevices = () => {\n    this.setState(state => ({ isOpen: !state.isOpen }));\n  };\n\n  public render() {\n    const { isOpen } = this.state;\n    const {\n      currentDeviceId,\n      deviceId,\n      devices,\n      playerPosition,\n      styles: { activeColor, altColor, bgColor, color },\n      title,\n    } = this.props;\n\n    return (\n      <Wrapper\n        style={{\n          altColor,\n          bgColor,\n          c: currentDeviceId && deviceId && currentDeviceId !== deviceId ? activeColor : color,\n          p: playerPosition,\n        }}\n      >\n        {!!devices.length && (\n          <>\n            {isOpen && (\n              <ClickOutside onClick={this.handleClickToggleDevices}>\n                {devices.map((d: SpotifyDevice) => (\n                  <button\n                    key={d.id}\n                    className={d.id === currentDeviceId ? 'rswp__devices__active' : undefined}\n                    data-id={d.id}\n                    onClick={this.handleClickSetDevice}\n                    type=\"button\"\n                  >\n                    {d.name}\n                  </button>\n                ))}\n              </ClickOutside>\n            )}\n            <button\n              aria-label={title}\n              onClick={this.handleClickToggleDevices}\n              title={title}\n              type=\"button\"\n            >\n              <DevicesIcon />\n            </button>\n          </>\n        )}\n      </Wrapper>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}